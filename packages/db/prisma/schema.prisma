// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "extendedWhereUnique"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id              String            @id @default(cuid())
  userId          String            @unique
  name            String            
  email           String            
  role            String?
  Product         Product[]
  UserProductView UserProductView[]

  @@index([userId])
}

// Category Schena
model Category {
  id           String                 @id @default(cuid())
  name         String                 @unique
  slug         String                 @unique
  isActive     Boolean                @default(true)
  autocomplete CategoryAutoComplete[]
  products     Product[]
  image        CategoryImage?
}

model CategoryAutoComplete {
  id         String    @id @default(cuid())
  name       String    @db.Text
  Category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?

  @@index([categoryId])
}

model CategoryImage {
  id         String   @id @default(cuid())
  publicId   String   @db.Text
  image      String   @db.Text
  blur       String?  @db.Text
  size       Int
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String   @unique
}

// Product Schema
model Product {
  id            String            @id @default(cuid())
  name          String            @db.Text
  type          String            @db.Text
  brand         String            @db.Text
  description   String?           @db.Text
  price         Float
  priceType     String            @db.Text
  timeRange     Int
  timeRangeType String            @db.Text
  city          String            @db.Text
  category      Category          @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId    String
  images        ProductImage[]
  views         UserProductView[]
  user          User?             @relation(fields: [userId], references: [id])
  userId        String?
  isFeatured    Boolean           @default(false)
  isActive      Boolean           @default(true)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  @@index([userId])
  @@index([categoryId])
}

model ProductImage {
  id        String  @id @default(cuid())
  publicId  String  @db.Text
  image     String  @db.Text
  blur      String? @db.Text
  size      Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  @@index([productId])
}

model UserProductView {
  id        String   @id @default(cuid())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([productId])
}
